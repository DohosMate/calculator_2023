*, *::before, *::after {
    box-sizing: border-box;
}

body {
    margin: 0;
    background: linear-gradient(to right, #00AAFF, #00ff6c)
}

.calculator-grid {
    display: grid;
    margin-top: 2rem;
    justify-content: center;    /* vizszintesen középre igazit*/
    grid-template-columns: repeat(4,6rem);  /* a calculator-grid tartalmát 4 oszlopba rendezi ahol egy oszlop szélessége 6 rem*/
    grid-template-rows: minmax(7rem, auto) repeat(5, 6rem); /*a calculator-grid tartalmát 5 sorba rendezi ahol a magassága egy sornak 6rem viszont az első soré min 7rem a max pedi auto ra van állítva azért mert a kijelzőn ha nagy a szám akkor dinamikusan kell változnia*/
}

.calculator-grid > button {
    cursor:pointer;
    font-size: 2rem;
    border: 1px solid white;
    outline: none;
    background-color: rgba(255, 255, 255, .75);
}

.calculator-grid > button:hover,
.calculator-grid > button:focus {
    background-color: rgba(255, 255, 255, .9)
}

.span-two {
    grid-column: span 2;
}

.output {
    grid-column: 1/-1;  /* kijelző szeretnénk ha a legfelső sorban lenne csak maga teljes hosszában. 1/-1 :  a legelső oszloptól az utolsóig tartson*/
    background-color: rgba(0, 0, 0, .75);
    display: flex;
    flex-direction:column;      /* a previous és a current- operand ennek hatására kerül egymás alá nem pedig mellé*/
    align-items: flex-end;       /* ha túl hosszú a szám akkor sem fut ki jobbra az outputból viszont kitolja balja*/
    justify-content: space-around;  /*sorközt állít*/
    padding: .75rem;    /*eltartás a doboz szélétől*/
    word-wrap: break-word;
    word-break: break-all;
}

.output .previous-operand {
    color: rgba(255, 255, 255, .75);
    font-size: 1.5rem;
}

.output .current-operand {
    color: white;
    font-size: 2.5rem;
}